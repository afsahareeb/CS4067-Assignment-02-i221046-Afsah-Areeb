version: '3.8'

networks:
  event-network:

services:
  postgres-user:
    image: postgres:latest
    container_name: postgres-user-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_USER}
      POSTGRES_DB: ${POSTGRES_DB_USER}
    ports:
      - "5433:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - event-network

  postgres-event:
    image: postgres:latest
    container_name: postgres-event-db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER_EVENT}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD_EVENT}
      POSTGRES_DB: ${POSTGRES_DB_EVENT}
    ports:
      - "5434:5432"
    volumes:
      - postgres_event_data:/var/lib/postgresql/data
    networks:
      - event-network

  mongodb-booking:
    image: mongo:latest
    container_name: mongo-booking-db
    restart: always
    ports:
      - "27018:27017"
    volumes:
      - mongo_booking_data:/data/db
    networks:
      - event-network

  mongodb-notification:
    image: mongo:latest
    container_name: mongo-notification-db
    restart: always
    ports:
      - "27019:27017"
    volumes:
      - mongo_notification_data:/data/db
    networks:
      - event-network

  user-service:
    build: ./UserService
    container_name: user-service
    restart: always
    depends_on:
      - postgres-user
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER_USER}:${POSTGRES_PASSWORD_USER}@postgres-user:5432/${POSTGRES_DB_USER}
    ports:
      - "8001:8001"
    networks:
      - event-network

  event-service:
    build: ./EventService
    container_name: event-service
    restart: always
    depends_on:
      - postgres-event
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER_EVENT}:${POSTGRES_PASSWORD_EVENT}@postgres-event:5432/${POSTGRES_DB_EVENT}
    ports:
      - "8000:8000"
    networks:
      - event-network

  booking-service:
    build: ./BookingService
    container_name: booking-service
    restart: always
    depends_on:
      - mongodb-booking
    env_file:
      - .env
    environment:
      MONGO_URI: ${MONGO_URI_BOOKING}
    ports:
      - "5000:5000"
    networks:
      - event-network

  notification-service:
    build: ./NotificationService
    container_name: notification-service
    restart: always
    depends_on:
      - mongodb-notification
      - rabbitmq
    env_file:
      - .env
    environment:
      MONGO_URI: ${MONGO_URI_NOTIFICATION}
      RABBITMQ_URL: ${RABBITMQ_URL}
      EMAIL_HOST: ${EMAIL_HOST}
      EMAIL_PORT: ${EMAIL_PORT}
      EMAIL_USERNAME: ${EMAIL_USERNAME}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
    ports:
      - "5002:5002"
    networks:
      - event-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - event-network

  frontend-service:
    build: ./frontend
    container_name: frontend-service
    restart: always
    depends_on:
      - user-service
      - event-service
      - booking-service
      - notification-service
    ports:
      - "3000:80"
    networks:
      - event-network

volumes:
  postgres_user_data:
  postgres_event_data:
  mongo_booking_data:
  mongo_notification_data:
